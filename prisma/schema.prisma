generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USERS & ROLES ====================

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  firstName     String?
  lastName      String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  roleId        Int
  createdLeases Lease[]
  createdOwners Owner[]
  role          Role     @relation(fields: [roleId], references: [id])
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  action      String           @unique
  description String?
  roles       RolePermission[]
}

model RolePermission {
  roleId       Int
  permissionId Int
  assignedAt   DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

// ==================== OWNERS & LEASES ====================

model Owner {
  id           Int      @id @default(autoincrement())
  fullName     String
  address      String?
  activityType String?
  phoneNumber  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  createdById  Int
  tin          String   @unique
  leases       Lease[]
  createdBy    User     @relation(fields: [createdById], references: [id])
}

model Store {
  id          Int       @id @default(autoincrement())
  storeNumber String    @unique
  area        Float
  description String?
  type        StoreType @default(SHOP)
  kassaID     String
  sortKey     Int?
  leases      Lease[]
}

model Stall {
  id          Int          @id @default(autoincrement())
  stallNumber String?      @unique @default(uuid())
  area        Float
  saleTypeId  Int?
  sectionId   Int?
  description String?
  dailyFee    Decimal?     @default(0)
  Attendance  Attendance[]
  SaleType    SaleType?    @relation(fields: [saleTypeId], references: [id])
  Section     Section?     @relation(fields: [sectionId], references: [id])
}

// ==================== ATTENDANCE & TRANSACTION ====================

model Attendance {
  id            Int               @id @default(autoincrement())
  date          DateTime          @db.Date
  stallId       Int
  status        AttendancePayment @default(UNPAID)
  amount        Decimal?          @default(0)
  transaction   Transaction?      @relation(fields: [transactionId], references: [id])
  transactionId Int?              @unique
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt
  Stall         Stall             @relation(fields: [stallId], references: [id])

  @@unique([stallId, date])
}

model Transaction {
  id                 Int           @id @default(autoincrement())
  amount             Decimal
  status             String        @default("PENDING")
  paymeTransactionId String?
  leaseId            Int?
  attendance         Attendance?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt
  paymentMethod      PaymentMethod @default(PAYME)
  lease              Lease?        @relation(fields: [leaseId], references: [id])
}

// ==================== LEASES ====================

model Lease {
  id                Int             @id @default(autoincrement())
  certificateNumber String?
  issueDate         DateTime?
  expiryDate        DateTime?
  isActive          Boolean         @default(true)
  shopMonthlyFee    Decimal?
  stallMonthlyFee   Decimal?
  guardFee          Decimal?
  ownerId           Int
  storeId           Int?
  stallId           Int?
  createdById       Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  paymentInterval   PaymentInterval @default(MONTHLY)
  createdBy         User            @relation(fields: [createdById], references: [id])
  owner             Owner           @relation(fields: [ownerId], references: [id])
  store             Store?          @relation(fields: [storeId], references: [id])
  transactions      Transaction[]
}

// ==================== PAYMENT INTEGRATIONS ====================

model ClickTransaction {
  id                Int       @id @default(autoincrement())
  clickTransId      String    @unique @map("click_trans_id")
  clickPaydocId     String?   @map("click_paydoc_id")
  merchantTransId   String    @map("merchant_trans_id")
  merchantPrepareId Int?      @map("merchant_prepare_id")
  amount            Decimal   @db.Decimal(10, 2)
  action            Int
  status            Int       @default(0)
  error             Int       @default(0)
  errorNote         String?   @map("error_note")
  signTime          DateTime? @map("sign_time")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@index([merchantTransId])
  @@index([clickTransId])
  @@map("click_transactions")
}

model payments {
  id             Int       @id @default(autoincrement())
  gateway        String    @db.VarChar(10)
  transaction_id String    @db.VarChar(255)
  account_id     String    @db.VarChar(255)
  amount         Decimal   @db.Decimal(15, 2)
  state          Int
  reason         Int?
  extra_data     Json
  created_at     DateTime  @db.Timestamptz(6)
  updated_at     DateTime  @db.Timestamptz(6)
  performed_at   DateTime? @db.Timestamptz(6)
  cancelled_at   DateTime? @db.Timestamptz(6)

  @@unique([gateway, transaction_id])
  @@index([cancelled_at])
  @@index([created_at])
  @@index([performed_at])
  @@index([updated_at])
}

// ==================== SUPPORT TABLES ====================

model SaleType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  tax         Float
  Stall       Stall[]
}

model Section {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  Stall       Stall[]
}

// ==================== ENUMS ====================

enum PaymentMethod {
  PAYME
  BANK_TRANSFER
  CASH
  OTHER
  CLICK
}

enum PaymentInterval {
  DAILY
  MONTHLY
}

enum AttendancePayment {
  PAID
  UNPAID
}

enum StoreType {
  SHOP
  WAREHOUSE
  CONTAINER
  OTHER
}
