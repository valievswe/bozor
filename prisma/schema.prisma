generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  firstName     String?
  lastName      String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  roleId        Int
  createdLeases Lease[]
  createdOwners Owner[]
  role          Role     @relation(fields: [roleId], references: [id])
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  action      String           @unique
  description String?
  roles       RolePermission[]
}

model RolePermission {
  roleId       Int
  permissionId Int
  assignedAt   DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

model Owner {
  id           Int      @id @default(autoincrement())
  fullName     String
  address      String?
  activityType String?
  phoneNumber  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  createdById  Int
  tin          String   @unique
  leases       Lease[]
  createdBy    User     @relation(fields: [createdById], references: [id])
}

model Store {
  id          Int       @id @default(autoincrement())
  storeNumber String    @unique
  area        Float
  description String?
  type        StoreType @default(SHOP)
  kassaID     String
  sortKey     Int?
  leases      Lease[]
}

model Stall {
  id          Int     @id @default(autoincrement())
  stallNumber String? @unique @default(uuid())
  area        Float
  payment_url String?

  attendances Attendance[]
  Section     Section?     @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  sectionId   Int?

  saleType   SaleType? @relation(fields: [saleTypeId], references: [id], onDelete: SetNull)
  saleTypeId Int?
}

model Section {
  id     Int     @id @default(autoincrement())
  name   String
  stalls Stall[]
}

model SaleType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  tax         Float
  stalls      Stall[]
}

enum PaymentMethod {
  PAYME
  BANK_TRANSFER
  CASH
  CLICK
  OTHER
}

model Transaction {
  id                 Int           @id @default(autoincrement())
  amount             Decimal
  status             String        @default("PENDING")
  paymeTransactionId String?
  leaseId            Int
  lease              Lease         @relation(fields: [leaseId], references: [id])
  paymentMethod      PaymentMethod @default(PAYME)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

enum PaymentInterval {
  DAILY
  MONTHLY
}

enum AttendancePayment {
  PAID
  UNPAID
}

model Attendance {
  id   Int      @id @default(autoincrement())
  date DateTime @db.Date

  stallId Int?
  status  AttendancePayment @default(UNPAID)
  Stall   Stall?            @relation(fields: [stallId], references: [id])

  @@unique([stallId, date])
  // absence Boolean @default(false)
}

model Lease {
  id                Int             @id @default(autoincrement())
  certificateNumber String?
  issueDate         DateTime?
  expiryDate        DateTime?
  isActive          Boolean         @default(true)
  shopMonthlyFee    Decimal?
  stallMonthlyFee   Decimal?
  guardFee          Decimal?
  ownerId           Int
  storeId           Int?
  stallId           Int?
  paymentInterval   PaymentInterval @default(MONTHLY)
  createdById       Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  createdBy         User            @relation(fields: [createdById], references: [id])
  owner             Owner           @relation(fields: [ownerId], references: [id])
  store             Store?          @relation(fields: [storeId], references: [id])
  transactions      Transaction[]
}

model ClickTransaction {
  id                Int       @id @default(autoincrement())
  clickTransId      String    @unique @map("click_trans_id")
  clickPaydocId     String?   @map("click_paydoc_id")
  merchantTransId   String    @map("merchant_trans_id")
  merchantPrepareId Int?      @map("merchant_prepare_id")
  amount            Decimal   @db.Decimal(10, 2)
  action            Int
  status            Int       @default(0)
  error             Int       @default(0)
  errorNote         String?   @map("error_note")
  signTime          DateTime? @map("sign_time")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@index([merchantTransId])
  @@index([clickTransId])
  @@map("click_transactions")
}

/**
 * ---------------- Django Tables (kept for compatibility) ----------------
 */

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  auth_user_groups       auth_user_groups[]

  @@index([name], map: "auth_group_name_a6ea08ec_like")
}

model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([group_id, permission_id])
  @@index([group_id])
  @@index([permission_id])
}

model auth_permission {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  content_type_id            Int
  codename                   String                       @db.VarChar(100)
  auth_group_permissions     auth_group_permissions[]
  django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  auth_user_user_permissions auth_user_user_permissions[]

  @@unique([content_type_id, codename])
  @@index([content_type_id])
}

model auth_user {
  id                         Int                          @id @default(autoincrement())
  password                   String                       @db.VarChar(128)
  last_login                 DateTime?                    @db.Timestamptz(6)
  is_superuser               Boolean
  username                   String                       @unique @db.VarChar(150)
  first_name                 String                       @db.VarChar(150)
  last_name                  String                       @db.VarChar(150)
  email                      String                       @db.VarChar(254)
  is_staff                   Boolean
  is_active                  Boolean
  date_joined                DateTime                     @db.Timestamptz(6)
  auth_user_groups           auth_user_groups[]
  auth_user_user_permissions auth_user_user_permissions[]
  django_admin_log           django_admin_log[]

  @@index([username])
}

model auth_user_groups {
  id         BigInt     @id @default(autoincrement())
  user_id    Int
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  auth_user  auth_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, group_id])
  @@index([group_id])
  @@index([user_id])
}

model auth_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  auth_user       auth_user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, permission_id])
  @@index([permission_id])
  @@index([user_id])
}

model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.Timestamptz(6)
  object_id           String?
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.SmallInt
  change_message      String
  content_type_id     Int?
  user_id             Int
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  auth_user           auth_user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([content_type_id])
  @@index([user_id])
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model])
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.Timestamptz(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String
  expire_date  DateTime @db.Timestamptz(6)

  @@index([expire_date])
  @@index([session_key])
}

model payments {
  id             Int       @id @default(autoincrement())
  gateway        String    @db.VarChar(10)
  transaction_id String    @db.VarChar(255)
  account_id     String    @db.VarChar(255)
  amount         Decimal   @db.Decimal(15, 2)
  state          Int
  reason         Int?
  extra_data     Json
  created_at     DateTime  @db.Timestamptz(6)
  updated_at     DateTime  @db.Timestamptz(6)
  performed_at   DateTime? @db.Timestamptz(6)
  cancelled_at   DateTime? @db.Timestamptz(6)

  @@unique([gateway, transaction_id])
  @@index([cancelled_at])
  @@index([created_at])
  @@index([performed_at])
  @@index([updated_at])
}

enum StoreType {
  SHOP
  WAREHOUSE
  CONTAINER
  OTHER
}
